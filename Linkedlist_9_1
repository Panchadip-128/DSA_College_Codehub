#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int data;
 struct Node* next;
2. Pop
3. Display
4. Exit
Enter your choice:
1
Enter the element to be pushed:34
STACK: 23 34 <- TOP
*************************************************
Menu
1. Push
2. Pop
3. Display
4. Exit
Enter your choice:
2
Popped element is 34
STACK: 23 <- TOP
**********************************************
} Node;
typedef struct {
 Node* front;
 Node* rear;
} Queue;
void initQueue(Queue* q) {
 q->front = NULL;
 q->rear = NULL;
}
int isEmpty(Queue* q) {
 return (q->front == NULL);
}
void enqueue(Queue* q, int value) {
 Node* newNode = (Node*)malloc(sizeof(Node));
 if (newNode == NULL) {
 printf("Memory allocation failed\n");
 return;
 }
 newNode->data = value;
 newNode->next = NULL;
 if (isEmpty(q)) {
 q->front = newNode;
 } else {
 q->rear->next = newNode;
 }
 q->rear = newNode;
 printf("Enqueued: %d\n", value);
}
int dequeue(Queue* q) {
 if (isEmpty(q)) {
 printf("Queue is empty. Cannot dequeue\n");
 return -1;
 }
 Node* temp = q->front;
 int value = temp->data;
 q->front = q->front->next;
 if (q->front == NULL) {
 q->rear = NULL; 
 }
 free(temp);
 printf("Dequeued: %d\n", value);
 return value;
}
void displayQueue(Queue* q) {
 if (isEmpty(q)) {
 printf("Queue is empty\n");
 return;
 }
 Node* current = q->front;
 printf("Queue contents: ");
 while (current != NULL) {
 printf("%d ", current->data);
 current = current->next;
 }
 printf("\n");
}
int main() {
 Queue q;
 initQueue(&q);
 // Enqueue some elements
 enqueue(&q, 10);
 enqueue(&q, 20);
 enqueue(&q, 30);
 displayQueue(&q);
 dequeue(&q);
 dequeue(&q);
 displayQueue(&q);
 enqueue(&q, 40);
 enqueue(&q, 50);
 displayQueue(&q);
 return 0;
}
