#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#define MAX 100
typedef struct {
 char items[MAX];
 int front, rear;
} Deque;
void initDeque(Deque *dq) {
 dq->front = -1;
 dq->rear = -1;
}
bool isEmpty(Deque *dq) {
 return (dq->front == -1);
}
bool isFull(Deque *dq) {
 return ((dq->rear + 1) % MAX == dq->front);
}
 void insertRear(Deque *dq, char ch) {
 if (isFull(dq)) {
 printf("Deque is full, cannot insert '%c'\n", ch);
 return;
 }
 if (isEmpty(dq)) {
 dq->front = dq->rear = 0;
 } else {
 dq->rear = (dq->rear + 1) % MAX;
 }
 dq->items[dq->rear] = ch;
}
char deleteFront(Deque *dq) {
 if (isEmpty(dq)) {
 return '\0'; // Return null character if deque is empty
 }
 char ch = dq->items[dq->front];
 if (dq->front == dq->rear) {
 // If only one element was in the deque
 dq->front = dq->rear = -1;
 } else {
 dq->front = (dq->front + 1) % MAX;
 }
 return ch;
}
char deleteRear(Deque *dq) {
 if (isEmpty(dq)) {
 return '\0'; // Return null character if deque is empty
 }
 char ch = dq->items[dq->rear];
 if (dq->front == dq->rear) {
 // If only one element was in the deque
 dq->front = dq->rear = -1;
 } else {
 dq->rear = (dq->rear - 1 + MAX) % MAX;
 }
 return ch;
}
bool isPalindrome(char *str) {
 Deque dq;
 initDeque(&dq);
 int len = strlen(str);
 for (int i = 0; i < len; i++) {
 insertRear(&dq, str[i]);
 }
 while (dq.front != dq.rear && dq.front != (dq.rear + 1) % MAX) {
 char frontChar = deleteFront(&dq);
 char rearChar = deleteRear(&dq);
 if (frontChar != rearChar) {
 return false;
 }
 }
 return true;
}
int main() {
 char str[MAX];
 printf("Enter a string: ");
 scanf("%s", str);
 if (isPalindrome(str)) {
 printf("The string '%s' is a palindrome.\n", str);
 } else {
 printf("The string '%s' is not a palindrome.\n", str);
 }
 return 0;
}
